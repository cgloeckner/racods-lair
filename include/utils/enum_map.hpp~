#pragma once
#include <limits>
#include <array>
#include <utils/enum_utils.hpp>

namespace utils {

template <typename Key, typename Value>
class EnumMap;

template <typename Key, typename Value>
inline typename EnumMap<Key, Value>::iterator begin(EnumMap<Key, Value>& map);

template <typename Key, typename Value>
inline typename EnumMap<Key, Value>::iterator end(EnumMap<Key, Value>& map);

template <typename Key, typename Value>
inline typename EnumMap<Key, Value>::const_iterator begin(EnumMap<Key, Value> const & map);

template <typename Key, typename Value>
inline typename EnumMap<Key, Value>::const_iterator end(EnumMap<Key, Value> const & map);

template <typename Key, typename Value>
inline bool operator==(EnumMap<Key, Value> const & lhs, EnumMap<Key, Value> const & rhs);

template <typename Key, typename Value>
inline bool operator!=(EnumMap<Key, Value> const & lhs, EnumMap<Key, Value> const & rhs);

// key requires std::numeric_limits<Key>::min(); and ::max();
template <typename Key, typename Value>
class EnumMap {
	
	private:
		static std::size_t constexpr MinKey = static_cast<std::size_t>(std::numeric_limits<Key>::min());
		static std::size_t constexpr MaxKey = static_cast<std::size_t>(std::numeric_limits<Key>::max());
		static std::size_t constexpr NumKeys = MaxKey - MinKey + 1u;
		
		using pair = std::pair<Key, Value>;
		using container = std::array<pair, NumKeys>;
		using iterator = typename container::iterator;
		using const_iterator = typename container::const_iterator;
		container data;
		
		friend iterator begin<>(EnumMap<Key, Value>& map);
		friend iterator end<>(EnumMap<Key, Value>& map);
		friend const_iterator begin<>(EnumMap<Key, Value> const & map);
		friend const_iterator end<>(EnumMap<Key, Value> const & map);
		
	public:
		EnumMap();
		EnumMap(Value const & default_value);
		
		Value const & operator[](Key const & key) const;
		Value& operator[](Key const & key);
		
		std::size_t size() const;
		iterator begin();
		iterator end();
		const_iterator begin() const;
		const_iterator end() const;
};

} // ::utils

// include implementation details
#include <utils/enum_map.inl>
